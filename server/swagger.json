{
  "swagger": "2.0",
  "info": {
    "description": "Banka is a light-weight core banking application that powers banking operations like user registration, account creation, customer deposit and withdrawals.",
    "version": "1.0.0",
    "title": "Banka API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "tobechukwuobitube@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3001",
  "basePath": "/api/v2",
  "tags": [
    {
      "name": "Users",
      "description": "API Endpoints for registered users in the Application"
    },
    {
      "name": "Accounts",
      "description": "API Endpoints for Bank Accounts created by Users in the Application"
    },
    {
      "name": "Transactions",
      "description": "API Endpoints for Credit and Debit Transactions created by cashiers users in the Application"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Registers a new user in the application",
        "description": "",
        "operationId": "signupNewUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be registered in the application",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "409": {
            "description": "User already exist"
          },
          "201": {
            "description": "Sign up was successful"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Signin a user with existing user credentials",
        "description": "",
        "operationId": "loginExistingUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object credentials that needs to sign in",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Account does not exist"
          },
          "400": {
            "description": "Bad request || Invalid user credentials"
          },
          "200": {
            "description": "You are successfully logged in"
          }
        }
      }
    },
    "/users/:email/cashier": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update the type status of a user from client to cashier",
        "description": "",
        "operationId": "updateToCashier",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Update client to cashier",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Staff"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "User does not exist"
          },
          "200": {
            "description": "User successfully updated"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/users/:email/admin": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update the type status of a user from cashier to admin",
        "description": "",
        "operationId": "updateToAdmin",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Update cashier to Admin",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Staff"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "User does not exist"
          },
          "200": {
            "description": "User successfully updated"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/users/user/:email": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user account from the application database",
        "description": "",
        "operationId": "deleteUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Delete a user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Staff"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "User  account does not exist"
          },
          "200": {
            "description": "User successfully updated"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get all bank accounts - filter by status [active, dormant]",
        "description": "N.B Only staff can perform this operation",
        "operationId": "getAccount",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "dormant",
                "active"
              ],
              "default": "all"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "403": {
              "description": "Only a Staff can perform this operation"
            },
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "204": {
              "description": "No account waas found"
          },
          "200": {
              "description": "Successfully fetched all bank accounts"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create a bank account",
        "description": "",
        "operationId": "createAccount",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object credentials that are required for sign in",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAccount"
            }
          }
        ],
        "responses": {
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "400": {
            "description": "A User Already have an Account or Account does exist or validation error"
          },
          "200": {
            "description": "Successfully Created an Account"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/accounts/:accountNumber": {
      "parameters": [
        {
          "name": "accountNumber",
          "in": "path",
          "description": "Account number of the account we want to work with",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "tags": [
          "Accounts"
        ],
        "summary": "Activate or deactivate an account.",
        "description": "N.B - Only Staff's can perform this operation",
        "operationId": "patchAccountByAccounNumber",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Specify a bank account status (active, dormant)",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "example": "dormant"
                }
              }
            }
          }
        ],
        "responses": {
          "403": {
            "description": "User is not permitted to perform this operation"
          },
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "400": {
            "description": "Account number doesn't exist || Validation error"
          },
          "200": {
            "description": "Status was successfully updated"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a specific account",
        "description": "N.B - a client can get only his/her account while a staff can get all accounts",
        "operationId": "getAccountByAccountNumber",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "User is not permitted to perform this operation"
          },
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "400": {
              "description": "Account number doesn't exist"
          },
          "200": {
              "description": "Status was successfully updated"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "summary": "Deletes an account",
        "description": "N.B - Only Staff's can perform this operation",
        "operationId": "deleteAccount",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "400": {
              "description": "Account number doesn't exist"
          },
          "200": {
              "description": "Status was successfully deleted"
          },
          "403": {
            "description": "User is not permitted to perform this operation"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/user/:email/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "View all accounts owned by a specific user (client)​",
        "description": "N.B - user can only get personal accounts",
        "operationId": "userAccounts",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "An email address of a user",
            "required": true,
            "type": "string",
            "format": "email"
          }
        ],
        "responses": {
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "403": {
            "description": "User is not permitted to perform this operation"
          },
          "400": {
              "description": "Account number doesn't exist"
          },
          "200": {
              "description": "Accounts successfully fetched"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/transactions":{
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get a list of all transactions.",
        "description": "",
        "operationId": "allTransactions",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "There are no transactions records"
          },
          "403": {
            "description": "Uauthorized - Specify a JWT Authorization token in the header"
            },
          "200": {
            "description": "Transactions successfully retrieved"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/transactions/:accountNumber/debit":{
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Debit a bank account.",
        "description": "",
        "operationId": "debitAccount",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "accountNumber",
            "description": "account number of user to perform transaction on",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Amount to debit from the account",
            "schema": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "type": "float",
                  "example": "1000.00"
                }
              }
            }
          }
        ],
        "responses": {
          "403": {
            "description": "User is not permitted to perform this operation"
          },
          "401": {
            "description": "Uauthorized - Specify a JWT Authorization token in the header"
            },
          "400": {
            "description": "Account number doesn't exist || Validation Error"
          },
          "200": {
            "description": "Transaction was succesful"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/transactions/:accountNumber/credit":{
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Credit a bank account.",
        "description": "",
        "operationId": "creditAccount",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "accountNumber",
            "description": "account number of user to perform transaction on",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "amount",
            "description": "Amount to credit to the account",
            "schema": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "type": "float",
                  "example": "2500.99"
                }
              }
            }
          }
        ],
        "responses": {
          "403": {
            "description": "User is not permitted to perform this operation"
          },
          "401": {
            "description": "Uauthorized - Specify a JWT Authorization token in the header"
            },
          "400": {
            "description": "Account number doesn't exist || Validation Error"
          },
          "200": {
            "description": "Transaction was succesful"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/accounts/:accountNumber/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "View all transactions owned by a specific user",
        "description": "N.B - user can only get personal transactions while staff can get all transactions",
        "operationId": "userTransactions",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountNumber",
            "in": "path",
            "description": "Account number of the account we want to work with",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "403": {
            "description": "User is not permitted to perform this operation"
          },
          "400": {
              "description": "Account number doesn't exist"
          },
          "200": {
              "description": "Transactions successfully fetched"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/transactions/:transactionId":{
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get a specific transaction",
        "description": "N.B - a client can get only his/her transactions while a staff can get all transactions",
        "operationId": "getTransactioById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "Id of transaction you want to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "403": {
            "description": "User is not permitted to perform this operation"
          },
          "401": {
              "description": "Uauthorized - Specify a JWT Authorization token in the header"
          },
          "400": {
              "description": "Account number doesn't exist"
          },
          "200": {
              "description": "Transactions successfully fetched"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    }
    
  },
  "securityDefinitions": {
      "Authorization": {
        "type": "JSON Web Token",
        "scheme": "Bearer",
        "description": "JWT token is received upon user successful login, input format: \"Bearer \\<token\\>\"",
        "name": "Authorization",
        "in": "header",
        "bearerFormat": "Bearer token"
    }
  },
  "definitions": {

    "CreateAccount":{
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "savings"
        },
        "balance": {
          "type": "number",
          "example": "0.00"
        }
      },
      "xml": {
        "name": "CreateAccount"
      }
    },

    "Login": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "example": "tobechukwu@email.com"
        },
        "password": {
          "type": "string",
          "example": "grace"
        }
      },
      "xml": {
        "name": "Login"
      }
    },
    "User": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "email",
        "password",
        "confirmPassword"
      ],
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Tobechukwu"
        },
        "lastName": {
          "type": "string",
          "example": "Obitube"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "tobechukwu@email.com"
        },
        "password": {
          "type": "string",
          "example": "grace"
        },
        "confirmPassword": {
          "type": "string",
          "example": "grace"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Staff": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "email",
        "password",
        "isAdmin"
      ],
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Tobechukwu"
        },
        "lastName": {
          "type": "string",
          "example": "Obitube"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "tobechukwu@email.com"
        },
        "password": {
          "type": "string",
          "example": "grace"
        },
        "isAdmin": {
          "type": "boolean",
          "example": true
        }
      },
      "xml": {
        "name": "Staff"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
